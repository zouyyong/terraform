
Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # aws_iam_policy.lambda_s3_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "lambda_s3_policy" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m description = "Policy to allow Lambda function access to S3 bucket"
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "lambda_s3_policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = "s3:GetObject"
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "arn:aws:s3:::yz-tarraform-testing/*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id   = (known after apply)
      [32m+[0m[0m tags_all    = (known after apply)
    }

[1m  # aws_iam_role.lambda_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "lambda_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "lambda_execution_role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # aws_iam_role_policy_attachment.lambda_execution_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "lambda_execution_policy" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      [32m+[0m[0m role       = "lambda_execution_role"
    }

[1m  # aws_iam_role_policy_attachment.lambda_s3_policy_attachment[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "lambda_s3_policy_attachment" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "lambda_execution_role"
    }

[1m  # aws_lambda_function.my_lambda_function[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "my_lambda_function" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m function_name                  = "my_lambda_function"
      [32m+[0m[0m handler                        = "lambda_function.lambda_handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m layers                         = (known after apply)
      [32m+[0m[0m memory_size                    = 128
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.8"
      [32m+[0m[0m s3_bucket                      = "yz-tarraform-testing"
      [32m+[0m[0m s3_key                         = "lambda.zip"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = "ujhhe2LnyYPWyQVcigLJkXjt9UNlL5Sdvs/S94jRQAA="
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags_all                       = (known after apply)
      [32m+[0m[0m timeout                        = 60
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = {
              [32m+[0m[0m "LOG_LEVEL" = "INFO"
            }
        }

      [32m+[0m[0m tracing_config {
          [32m+[0m[0m mode = "Active"
        }
    }

[1m  # aws_lambda_layer_version.my_lambda_layer[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_layer_version" "my_lambda_layer" {
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m compatible_runtimes         = [
          [32m+[0m[0m "python3.8",
        ]
      [32m+[0m[0m created_date                = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m layer_arn                   = (known after apply)
      [32m+[0m[0m layer_name                  = "my_lambda_layer"
      [32m+[0m[0m s3_bucket                   = "yz-tarraform-testing"
      [32m+[0m[0m s3_key                      = "layers.zip"
      [32m+[0m[0m signing_job_arn             = (known after apply)
      [32m+[0m[0m signing_profile_version_arn = (known after apply)
      [32m+[0m[0m skip_destroy                = false
      [32m+[0m[0m source_code_hash            = (known after apply)
      [32m+[0m[0m source_code_size            = (known after apply)
      [32m+[0m[0m version                     = (known after apply)
    }

[1m  # aws_s3_object.lambda_code[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_object" "lambda_code" {
      [32m+[0m[0m acl                    = (known after apply)
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m bucket                 = "yz-tarraform-testing"
      [32m+[0m[0m bucket_key_enabled     = (known after apply)
      [32m+[0m[0m checksum_crc32         = (known after apply)
      [32m+[0m[0m checksum_crc32c        = (known after apply)
      [32m+[0m[0m checksum_sha1          = (known after apply)
      [32m+[0m[0m checksum_sha256        = (known after apply)
      [32m+[0m[0m content_type           = (known after apply)
      [32m+[0m[0m etag                   = (known after apply)
      [32m+[0m[0m force_destroy          = false
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m key                    = "lambda.zip"
      [32m+[0m[0m kms_key_id             = (known after apply)
      [32m+[0m[0m server_side_encryption = (known after apply)
      [32m+[0m[0m source                 = "python/lambda.zip"
      [32m+[0m[0m storage_class          = (known after apply)
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m version_id             = (known after apply)
    }

[1m  # aws_s3_object.lambda_layer[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_object" "lambda_layer" {
      [32m+[0m[0m acl                    = (known after apply)
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m bucket                 = "yz-tarraform-testing"
      [32m+[0m[0m bucket_key_enabled     = (known after apply)
      [32m+[0m[0m checksum_crc32         = (known after apply)
      [32m+[0m[0m checksum_crc32c        = (known after apply)
      [32m+[0m[0m checksum_sha1          = (known after apply)
      [32m+[0m[0m checksum_sha256        = (known after apply)
      [32m+[0m[0m content_type           = (known after apply)
      [32m+[0m[0m etag                   = (known after apply)
      [32m+[0m[0m force_destroy          = false
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m key                    = "layers.zip"
      [32m+[0m[0m kms_key_id             = (known after apply)
      [32m+[0m[0m server_side_encryption = (known after apply)
      [32m+[0m[0m source                 = "python/layers.zip"
      [32m+[0m[0m storage_class          = (known after apply)
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m version_id             = (known after apply)
    }

[1mPlan:[0m 8 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m lambda_function_arn = (known after apply)
[0m[1m
Do you want to perform these actions?[0m
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  [1mEnter a value:[0m [0m
[0m[1maws_iam_policy.lambda_s3_policy: Creating...[0m[0m
[0m[1maws_iam_role.lambda_role: Creating...[0m[0m
[0m[1maws_s3_object.lambda_code: Creating...[0m[0m
[0m[1maws_s3_object.lambda_layer: Creating...[0m[0m
[0m[1maws_iam_policy.lambda_s3_policy: Creation complete after 1s [id=arn:aws:iam::483413011187:policy/lambda_s3_policy][0m
[0m[1maws_iam_role.lambda_role: Creation complete after 1s [id=lambda_execution_role][0m
[0m[1maws_iam_role_policy_attachment.lambda_execution_policy: Creating...[0m[0m
[0m[1maws_iam_role_policy_attachment.lambda_s3_policy_attachment: Creating...[0m[0m
[0m[1maws_iam_role_policy_attachment.lambda_s3_policy_attachment: Creation complete after 0s [id=lambda_execution_role-20240323231404833600000001][0m
[0m[1maws_iam_role_policy_attachment.lambda_execution_policy: Creation complete after 0s [id=lambda_execution_role-20240323231404841300000002][0m
[0m[1maws_s3_object.lambda_code: Creation complete after 3s [id=lambda.zip][0m
[0m[1maws_s3_object.lambda_layer: Still creating... [10s elapsed][0m[0m
[0m[1maws_s3_object.lambda_layer: Creation complete after 12s [id=layers.zip][0m
[0m[1maws_lambda_layer_version.my_lambda_layer: Creating...[0m[0m
[0m[1maws_lambda_layer_version.my_lambda_layer: Still creating... [10s elapsed][0m[0m
[0m[1maws_lambda_layer_version.my_lambda_layer: Creation complete after 13s [id=arn:aws:lambda:us-east-1:483413011187:layer:my_lambda_layer:2][0m
[0m[1maws_lambda_function.my_lambda_function: Creating...[0m[0m
[0m[1maws_lambda_function.my_lambda_function: Still creating... [10s elapsed][0m[0m
[0m[1maws_lambda_function.my_lambda_function: Creation complete after 11s [id=my_lambda_function][0m
[0m[1m[32m
Apply complete! Resources: 8 added, 0 changed, 0 destroyed.
[0m[0m[1m[32m
Outputs:

[0mlambda_function_arn = "arn:aws:lambda:us-east-1:483413011187:function:my_lambda_function"
